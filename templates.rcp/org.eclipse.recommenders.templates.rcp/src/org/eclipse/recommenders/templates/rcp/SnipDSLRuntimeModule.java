/*
 * generated by Xtext
 */
package org.eclipse.recommenders.templates.rcp;

import org.eclipse.xtext.xbase.compiler.XbaseCompiler;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
public class SnipDSLRuntimeModule extends
        org.eclipse.recommenders.templates.rcp.AbstractSnipDSLRuntimeModule {
    @SuppressWarnings("restriction")
    public Class<? extends XbaseCompiler> bindXbaseCompiler() {
        return org.eclipse.recommenders.templates.rcp.compiler.SnipDSLSpecificCompiler.class;

    }

    @org.eclipse.xtext.service.SingletonBinding(eager = true)
    public Class<? extends org.eclipse.recommenders.templates.rcp.validation.AbstractSnipDSLValidator> bindAbstractSnipDSLValidator() {
        return org.eclipse.recommenders.templates.rcp.validation.SnipDSLValidator.class;
    }

    /*
     * public Class<? extends XbaseBatchScopeProvider>
     * bindXbaseBatchScopeProvider() {
     * System.out.println("Scope has changed#1"); return
     * SnipDSLLocalScope.class; }
     */
    // public Class<? extends org.eclipse.xtext.scoping.IScopeProvider>
    // bindIScopeProvider() {
    // System.out.println("Scope has changed");
    // return SnipDSLScopeProvider.class;
    // }

    public Class<? extends org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer> bindITypeComputer() {
        return org.eclipse.recommenders.templates.rcp.typing.SnipDSLTypeComputer.class;
    }
}
