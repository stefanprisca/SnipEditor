/*
 * generated by Xtext
 */
package org.eclipse.recommenders.snipmatch.rcp.contentassist

import org.eclipse.recommenders.snipmatch.rcp.contentassist.AbstractSnipDSLProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.RuleCall
import com.google.inject.Inject
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider
import org.eclipse.xtext.common.types.access.IJvmTypeProvider.Factory

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
class SnipDSLProposalProvider extends AbstractSnipDSLProposalProvider {
	 @Inject
    private Factory jvmTypeProviderFactory;
    @Inject
    private ITypesProposalProvider        typeProposalProvider;
   
	override completeXFeatureCall_Feature(EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeXFeatureCall_Feature(model,assignment,context,acceptor)
		//System.out.println("it reaches here");
		
		//acceptor.accept(createCompletionProposal("Thisismyproposal", context))
	}	
	
	override completeXMemberFeatureCall_Feature(EObject model, Assignment assignment,
		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		//println(context.currentModel+"\n"+model+"\n"+assignment);
		
		//if(model)
		
		val jvmTypeProvider = jvmTypeProviderFactory.createTypeProvider(model.eResource().getResourceSet());
        //acceptor.accept(createCompletionProposal("Thisismyproposal", context))    
		lookupCrossReference(assignment.getTerminal() as CrossReference, context, acceptor)
		var surogate = assignment.getTerminal() as CrossReference
		
	}	
	override complete_XMemberFeatureCall(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
		//System.out.println("it reaches here #3");
		
	}
	override complete_jFaceExpression(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
		acceptor.accept(createCompletionProposal("This should be a proposal", context));
	}
}
